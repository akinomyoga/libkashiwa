
-------------------------------------------------------------------------------
  概要
-------------------------------------------------------------------------------

Title: kashiwa library
Author: K. Murase <myoga.murase@gmail.com>

他で必要になった数値計算関連のコードを放り込んでおく場所。


-------------------------------------------------------------------------------
  ToDo
-------------------------------------------------------------------------------

2017-02-03

* polynomial: 割り算 (商と余り)


2017-01-06

* Gauss-Legendre

  取り敢えず多倍長演算を使わずに係数を計算するというのでも良いのではないか。
  丸め誤差などが問題になるだろうが丸め誤差の範囲では問題なくできるだろう。

  係数を計算する為には先ず Legendre 多項式を生成して、
  更にその零点を見つけていく必要がある。
  Legendre 多項式の係数は一般に有理数になる。
  有理係数の多項式を実装するか、或いは分母は別に管理するかで取り扱う。
  分母を別に取り扱うとしても結局多項式同士の加算をする際には
  特別な処置が必要になるのではないかと思われる。
  或いは直接係数を計算してしまえば良いのだろうか。

2016-12-16

* ガウス求積: 次数を動的に指定できる様にした方が良い

  というのも実際の所、次数に応じた係数の計算はそんなに時間がかかるものではない筈だからである。
  もし気になるのであれば事前に巨大な表を生成してバイナリに埋め込んでおく事もできる。

  但し何れにしても各次数に応じた係数を計算するためには多倍長の計算が必要である。
  多倍長の実装が終わるまではガウス求積は現在持っている表に従った物を使うしかない。


2016-12-13

* 今必要な物・今後必要になる物

  > - 線形フィッティング用のコード

  - ベクトル場の積分曲線を作ること
    これは Runge-Kutta を利用する
    これは比較的自明なのでわざわざ libkashiwa の方で用意する物でもない気がする。

  - 多倍長演算
  - Gauss-Legendre quadrature 高精度版

  - 補間 (スプライン補間、チェビシェフ補間など)
    高速化の為の補間の場合には誤差評価もできる様にする。
    これは hydro2jam で使った物を移植してくれば良い。


-------------------------------------------------------------------------------
  Done
-------------------------------------------------------------------------------

2017-01-06

* Gauss-Chebyshev を実装した。

  実際にこれを使って計算をしてみるとそんなに収束は良くない。
  恐らく $\sqrt{1-x^2} f(x)$ が多項式近似でうまく表せなければ性能が悪いのだろう。
  $\sqrt{1-x^2}$ は $x \sim \pm1$ での振る舞いが激しい。傾きが発散する。
  Gauss Chebyshev を使うならば橋での振る舞いが激しい関数でないとよくなさそう。

  実際に f = 1/sqrt(1-x^2) の場合には次数 1 から厳密な値を返し、
  次数を増やしても結果は変わらない。

2016-12-19

* 2016-12-13 取り敢えずいま準備できる物

  > - Runge-Kutta
  > - 線形方程式解法
  > - Gauss-Legendre quadrature
  > 
  > 取り敢えず既存のファイルについては持ってきた。

  これらについて使い方を整理する。

  > また、実際にこれを使ったコードを用意しないと発展しないので、
  > bolt の側を libkashiwa を用いる様に書き換える。

* 2016-12-16 線形フィッティングのコード

  線形フィッティングは基本的には射影である。

    R^2 = (y - ∑ Ai fi)^2

  を最小化するというのは ${f_i}$ で貼られる部分空間に $y$ から垂線を下ろすという事である。
  垂線の長さが R であり、足の座標が $A_i$ である。

    y ->  Py = ∑_{ij} f_i (f_i \cdot f_j)^-1 f_j \cdot y

  実際以下の様になっているのでこれは射影である。

    P^2 = f_i (f_i \cdot f_j)^-1 f_j \cdot f_k (f_k \cdot f_l)^-1 f_l
      = f_i (f_i \cdot f_j)^-1 f_j = P
    P f_m = ∑_{ij} f_i (f_i \cdot f_j)^-1 f_j \cdot f_m
      = ∑_i f_i δ_{im} = f_m

  さて A_i の係数はどの様に読み取れるかと言うと、

    A_i = (f_i \cdot f_j)^-1 f_j \cdot y

  である。

  線形フィッティングのコードを書いたが、
  それを利用する側のコードを記述しなければならない。
  現在 bolt では計算結果を全て外に出力する様になっている。

  ところでその前にガウス求積のインターフェイスを何とかしなければならない。
  ガウス求積のインターフェイスは更新した。
  bolt から線形フィッティングの機能を呼び出す。
  見た感じ期待通りに動いている様子である。
  # ただし bolt の側で beta がとても小さいときに結果が滅茶苦茶になっている。
  # これは bolt の側の数値計算上の問題であるのでここでは関係ない。

2016-12-16

* ガウス求積のインターフェイス

  - 現在のガウス求積の interface ではスカラーの値しか積分できない。
    複数の数値・もしくはベクトルを積分できる様にする。

* 2016-12-15 線形方程式解法に関して

  現在の実装方法だと何回もメモリを確保したり開放したりという事になる。
  LU分解専用のバッファを用意して更に std::move を使ったり使わなかったり
  で動作が異なる様に実装するのが良いように思われる。

  更に元々の配列を破壊しても良い場合には更に使用メモリを削減する事ができる。

  →working_buffer を受け取ってその中で必要な領域を全て確保する様に変更した。
    更に様々な場合を想定して引数を増やした。
    入力用の配列と受取用の配列が一致している時に従来の動作 (配列を書き換える) と一致する。

2016-12-13

* bolt の filter

  bolt の側も filter-branch して Runge-Kutta を除くか?
  bolt の側では kashiwa を使う様に変更してから
  使わなくなった歴史を削除する様にすれば良い。

  と思ったが、よく考えてみれば bolt は embedded_runge_kutta.h
  その他に依存しているので embedded_runge_kutta.h etc を削除すると
  過去の version が動かなくなってしまう。
  embedded_runge_kutta.h etc 側がその他の部分に依存していなかったのと対照的である。
  従って bolt の側では過去の erk 類の歴史の改変は行わずに、
  現在の状態からファイルを削除するという様に留めて置くのが懸命である。

  取り敢えず bolt を kashiwa を使ってコンパイルする様に変更し、
  bolt に含まれていた対応するファイルたちを削除した。


* Runge-Kutta memo.txt, Makefile 取り込み

  よく考えたらこれを merge するのを忘れていた。

* Runge-Kutta 取り込み

  Runge-Kutta に関しては bolt repository から取り込む。
  関連する commit だけを抽出する方法について調べる。
  うーん。先ず初めに filter-branch --tree-filter で
  関係ないファイルを全て削除してそれから空のコミットを squash すれば良いのだろうか。

    $ g log --name-status | sed -n 's/^[A-Z]\b[[:space:]]*//p' | sort -u > list.txt

  とすると過去のファイル名一覧が出てくるのでそれを見て残したファイル名を削除する。
  そして、そのファイル名を使って filter-branch を実行する。
  Makefile, memo.txt に関しては使う部分もあるが不要な部分もあるだろう。
  これらに関しては取り敢えず削除しておいて後で必要な部分を pick up する。

    $ g filter-branch --tree-filter 'rm -rf $(< remove-list.txt)'

  取り敢えずはうまく行っている。そして沢山の空のコミットが残っている。これらはどの様に squash すれば良いのか。
  この方法がよく分からないと思ったが filter-branch --commit-filter の skip_commit を使えば良いらしい。
  しかし filter-branch の最中に現在のコミットが変更のないコミットなのかどうか調べる方法はあるのか。
  どうやら引数に commit id が与えられる様であるのでそれを用いて

    % git filter-branch --commit-filter '
    %   if [[ $(git log --name-status $1 | grep '^[A-Z]\b') ]]; then
    %     skip_commit "$@"
    %   else
    %     git commit-tree "$@"
    %   fi'

  とかやれば良いのだろうか。よく分からないので実際に試す必要があるだろうか。
  と思っていたら filter-branch の help に git_commit_non_empty_tree という物の説明がある。

    https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html

  という事は単に

    $ g filter-branch --commit-filter 'git_commit_non_empty_tree "$@"'

  で良いという事なのだろうか。試してみる事にする。うまく行ったので OK.
 
  改めて repository を観察してみると submodule (ext/getopt) が削除できていない。
  --tree-filter 'rm -rf ext/getopt' では不十分な様だ。検索してみると

    http://stackoverflow.com/questions/23207104/git-filter-branch-remove-all-submodules-from-my-repo

  にその物が書かれている。さて、これの回答を見ると --prune-empty というオプションがついている。
  これについて調べてみると、空になったコミットは自動で削除してくれる様である。

    [git filter-branchで過去の全てのcommitから画像ファイルの追加/変更をなかったことにしてリポジトリを軽量化する - dskd](http://dskd.jp/archives/46.html)

  つまり、わざわざ後で squash/git_commit_non_empty_tree を実行する必要はなかったのだ。

    $ git filter-branch -f --prune-empty --tree-filter '
    $   git submodule deinit -f .
    $   git rm -rf ./ext/getopt && rm -rf ./ext
    $   find . -name .gitmodules -delete'

  何か色々とエラーが出たような気がするが気にしない。更に、
  すべてのファイルの歴史をサブディレクトリ src 内に移動したい。
  これはできるのだろうか。

    [Gitリポジトリのディレクトリ構成を変更する - ekreaの日記](http://d.hatena.ne.jp/ekrea/20120819/1345401248)

  を参考にして試してみる。

    % git filter-branch -f --tree-filter 'mkdir src; mv *.* bflow ksh src/'

  エラーが出て出来ない。仕方がないので丁寧に書くことにする。

    $ git filter-branch -f --tree-filter '
    $   mkdir -p src
    $   a=()
    $   for f in *.* bflow ksh; do
    $     [[ -e $f ]] && a+=("$f")
    $   done
    $   if ((${#a[@]})); then
    $     mv -f "${a[@]}" src
    $   fi'

  できた。後はくっつけるだけである。

    [kashiwa]$ g checkout --orphan rk-merge
    [kashiwa]$ g pull ../bolt-rk-2 master
    [kashiwa]$ g checkout master
    [kashiwa]$ g merge rk-merge

  何事もなく終わった。

* 取り敢えず作る。計画を立てる。

  今までに書いたコード、それからこれから書く数値計算関連のコードに関して、
  便利で汎用的な物を全部ここに放り込んでいく事にする。

  実の所、殆ど車輪の再発明になる様な気がするが学習の為、
  モチベーションの為という事にする。

  既に書いたコードとしては Runge-Kutta 等があるが
  これはボルツマンのコードの方に記録されている。
  また線形方程式を LU 分解を用いて解くコードに関しては、
  rfh の方で書いてそれがボルツマンの方にも流用されている。

  また、線形フィッティングに関してはボルツマンの方で使いたいので、
  こちらで実装する事にしたい。

  更に Gauss quadrature に関してもまとめて置きたい。
  ゼロ点を正しく求める為には多倍長演算も欲しい。
  しかしこれは今の所使う予定はないので後で考えておく。


2016-04-25

* DOP853 を改造して途中で状態を出力するなどの処理をできる様にする。

  DOP853 では誤差に応じた h の変更なども含めて目的の時刻まで積分を実行する物なので、
  現在の様に時間微分の関数 f だけを渡す様な設計だと時間発展以外に何も出来ない。
  したがって、関数 f を渡す代わりに "方程式" と称して様々な事を
  実行する様なクラスインスタンスを渡す様にする必要がある。

2016-04-24

* Runge-Kutta について思うこと

  様々な種類の RK がある。どの次数を選ぶのが良いか。

  - 色々試してみるに高次であれば高次である程良い気がする。
  - 但し、問題が高階微分可能である場合に限られるのは当然である。
  - 時間微分の見た目自体が解析であっても、変数が場で不連続 (衝撃波) を持つ場合は時間微分ができなくなる。
    実際には空間の離散化をすると不連続性はない様に思われるが、
    空間の離散化をする前に、ルンゲクッタ化・及び不連続性の評価をして、
    その後で空間の離散化をしなければ物理的に正しい結果を得られない
    (これは 2016-04-24 の考察を参照のこと) ことに注意する。

  - http://www.ipc.akita-nct.ac.jp/yamamoto/lecture/2003/5E/lecture_5E/diff_eq/node2.html

    このページは可成り間違っていることばかり書かれている。

    | 検索すると「4 次以降は同じ段数が余分に必要だからコストが高く実際は4次しか使えない」
    | 「5次のRunge-Kuttaなど見た事ない」等と頭の悪いことを書いている人がいて、
    | 更にそれを引用している人達が沢山居てどうしようもない事になっているがこれは完全に誤りである。
    |
    | 実際に数値計算をしてみれば大抵の問題ではやはり高次である方が良いし、
    | また、実際に8次RKなどは高精度・長期間の天体の軌道計算では常用されている様だ。

    上記の文章でやり玉に挙げているのは実はこのページである。
    更に気になることが最後に書かれている。

    > ただし、4次のルンゲ・クッタ法よりも精度の良い方法がないわけでは有りません。
    > より高精度な方法として、Bulirsch-Store法や予測子・修正法などがあります。

    Bulirsch-Store法とは何のことかと思ったらリチャードソン補外の GBS 法の事である。
    でも GBS には基礎として低次のルンゲクッタを用いる。

    また予測子・修正子がここで出て来るのは謎である。これは陰的解法を近似するための方法の筈で、
    元の陰的解法を指定しなければ何のことだか分からない。陰的RKに適用しようとすると結局陽的RKに等価なので、
    だとすればこれは AB 法の類の予測子・修正子のことを言っているのだろう。
    しかしながらアダムスの方法は元より不安定であるし、更に 6 次を超えると不安定になって全く何も解けないらしい。
    高精度の方法として紹介される理由が不明である。

  各次数において複数の RK 法が大体あるがどれを選ぶのがよいのだろうか。
  - 調べてみると予想通り方程式によって良い方法という物が変わるようだ。
  - 物によっては丁度ぴったり高次の項が再現されて次数自体が実効的に上昇することもある。
  - しかしそれでも性能には大体の傾向がある様だ。眺めてみるとどうやら節点が均等に分布されていて、
    重みが対称でかつ真ん中に重みがある (積分公式に類似) ような物が性能がよいようである。


  RKの他にもABなどあるが結局どれを選べばよいのか。
  - ハイラーの本によるとさすが数値比較を沢山の問題に対して適用していて、
    結局自動ステップ幅制御は必須で、更に DOP853 が実際の計算時間で他を完全に引き離している。


2016-04-12

* 結局、取り敢えずは RKG を使うのが良さそうである。

  計算結果が安定でない場合には TVD RK4 を何處からか探してきて適用する必要がある。
  或いは、TVD RK4 にすると微妙なうねりが減るとかそういう事もあるかもしれないので、
  観察してみる価値はあるかもしれない。何れにしてもまずは RKG である。

2016-04-22

* RK: CV8 の丸め誤差が蓄積する。

  分割数を更に多くして確かめてみた所 RK4 の丸め誤差は一定に留まっているのに対して、
  CV8 の丸め誤差は線形で成長している。何故だろうか。
  CV8 の係数に丸め誤差が含まれている所為かと考えて、
  係数は bc で高精度に計算する様にしてみたが変わらない。

  というかそもそも線形で丸め誤差が成長するのは自然な事ではないのか。
  いや、或いは方程式に依存する筈であるが、丸め誤差は成長してもおかしくない。
  では、何故 RK4 では丸め誤差が成長しないのだろうか。
  そう思って、初期条件の値に 1e-15 の誤差を手で入れて試してみると、
  RK4 でも誤差が少しずつ成長する様になった。
  たまたま蓄積する丸め誤差が打ち消すような
  そういう初期条件になっていたということだろうか。
  また、初期条件に誤差を混入したら CV8 の方は
  逆に丸め誤差の蓄積が緩やかになったような気もする。

  結論: これは仕方がない。寧ろ RK4 で誤差が蓄積していないのが偶然。

2016-04-22

* Runge-Kutta Gill

  Runge-Kutta Gill は丸め誤差をキャンセルする様にできているのだと言っておきながら、
  他の4段4次の公式と較べて大して違いがある様には見えない。
  ただ、使用メモリ量が少なくて済むのは嬉しい事である。
  計算コストの方はどうなのだろうか。

  x どうも同じ 4次 RK でも手法によって誤差の比例係数の大きさに傾向がある様だ。
    勿論、解く問題によって状況は異なるのは当然だが、Kutta 3/8 が多くの場合で良い。
    Gill は次点である。古典的公式よりは良い結果を与える場合が多い。
    (そういう意味で古典的公式を使う利点はただ有名だからという以外にないようだ。)

  - また、微分 f を計算するのに一番コストがかかるという場合を考えるのだとすれば、
    Runge-Kutta プロセスで多少メモリを食おうが何しようが無視できる。

  - 他の公式と較べて (最低) メモリ使用量が 3/4 になるだけなので、
    実際の所それが丁度 CPU のキャッシュに乗り切るかどうかの分水嶺になるというケースは稀であろう。
    しかも、どうせデータはシーケンシャルに舐めるのでキャッシュに載ろうがどうだろうが
    (メモリコントローラが充分賢ければ) 余り関係ない。キャッシュにプリフェッチされる。

  何れにしても机上で考えても実際のところは分からない。
  様々な問題について実測してみないと確かなことは分からない。
